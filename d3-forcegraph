<!DOCTYPE html>
<html>

<head>
    <title>Force</title>
    <script src="jsLiberary/d3.min.js"></script>
</head>

<body>
    <svg width="1800" height="920" id="mainsvg" class="svgs"></svg>
    <script>
        let svg = d3.select('#mainsvg');
        var width = svg.attr('width'),
            height = svg.attr('height');
        let nodes, links;
        let circles, lines, text;
        let color;
        let simulation;

        let dragStarted = function (d) {
            d3.select(this).attr('opacity', 1);
            simulation.stop();
        }

        function dragged(d) {
            d3.select(this).attr('cx', d.x = d3.event.x).attr('cy', d.y = d3.event.y);
            ticked();
        }

        function dragEnded(d) {
            d3.select(this).attr('opacity', 0.5);
            simulation.restart();
        }

        const drag = d3.drag()
            .on('start', dragStarted)
            .on('drag', dragged)
            .on('end', dragEnded);

                svg.selectAll('.text1')
                .append('text')
                .attr('class', 'text1')
                .attr("x", 400)
                .attr("y", 90)
                .text('1234');
            
        const renderinit = function () {
            lines = svg.selectAll('path').data(links).join('line')
                .attr('stroke', 'black')
                .attr('stroke-width', 0.5)
                .attr('opacity', 0.2)


            circles = svg.selectAll('circle').data(nodes).join('circle')
                .attr('r', d=>d.r)
                .attr('fill', (d, i) => color(i))
                .attr('opacity', 0.5)
                .call(drag)
                
            
                // .append('text')
                // .attr('class', 'text1')
                // .attr('font-size', '5em')
                // .attr('text-anchor', 'middle') 
                // .text(d=>d.name)

               

        }

        let ticked = function () {
            lines.attr('x1', d => d.source.x)
                .attr('y1', d => d.source.y)
                .attr('x2', d => d.target.x)
                .attr('y2', d => d.target.y);

            circles.attr('cx', d => d.x)
                .attr('cy', d => d.y)

                // text.attr('x', d => d.x)
                //     .attr('y', d => d.y)
        }



    
        d3.json('data/socfb-Caltech36t.json').then(data => {
            links = data.links;
            console.log(data)
            nodes = data.nodes;


            color = d3.scaleDiverging(d3.interpolateRainbow).domain([0, nodes.length - 1])
            renderinit();

            simulation = d3.forceSimulation(nodes)
                .force('manyBody', d3.forceManyBody().strength(-30))
                .force('center', d3.forceCenter(width / 2, height / 2))
                .force("link", d3.forceLink(links).strength(0.1).distance(100))
                .on('tick', ticked)

            console.log(simulation)

        })
    </script>
</body>

</html>
